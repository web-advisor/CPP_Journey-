
	 Iterators : 
	 Output of begin and end : 1 2 3 4 5 
	 Output of cbegin and cend : 1 2 3 4 5 
	 Output of rbegin and rend : 5 4 3 2 1 
	 Output of crbegin and crend : 5 4 3 2 1 

	 Capacity Functions : 
	 Content of Vector : 1 2 3 4 5 
	 Size of Vector : 5
	 Capacity of Vector : 8
	 Max Size of Vector : 4611686018427387903
	 Checking if the Vector is Empty or not : 
	 Vector is not Empty . 
	 On resizing Vector as resize(4) : 1 2 3 4 
	 Resized Size : 4
	 Resized Capacity : 8
	 Shrinking to Fit ( Shrinking the capacity ) 
	 New capacity : 4
	 Reserving capacity as reserve(100)
	 New capacity : 100

	 Element Accessing Functions : 
	 Vector contents : 
	 1 2 3 4 5 6 7 8 9 10 
	 11 12 13 14 15 16 17 18 19 20 
	 21 22 23 24 25 26 27 28 29 30 
	 31 32 33 34 35 36 37 38 39 40 
	 41 42 43 44 45 46 47 48 49 50 
	 51 52 53 54 55 56 57 58 59 60 
	 61 62 63 64 65 66 67 68 69 70 
	 71 72 73 74 75 76 77 78 79 80 
	 81 82 83 84 85 86 87 88 89 90 
	 91 92 93 94 95 96 97 98 99 100 
	 
	 Using [] operator -> [25] : 26
	 using at() function -> at(75) : 76
	 Using front() : 1
	 Using back() : 100
	 Using data() : 1

	 Modifier Functions : 
	 Assign Functions : 
		 assign(7,100) : 100 100 100 100 100 100 100  Size : 7
		 assign(it,vec.end()-1) : 100 100 100  Size : 3
		 assign({546,43,53,5,535,35}) : 546 43 53 5 535 35  Size : 6
	 push_back function : 
		 push_back(200) push_back(100) push_back(300): 200 100 300 
	 pop_back() : 
		 On popping from back : 200 100 
	 Insert Functions : 
		 Vector Contents : 
		 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
		 insert(it1,2091) 
		 Updated : 1 2 3 4 5 6 7 2091 8 9 10 11 12 13 14 15 
		 insert(it1,4,100) 
		 Updated : 1 2 3 4 5 6 7 100 100 100 100 2091 8 9 10 11 12 13 14 15 
		 insert(it1,vec2.begin(),vec2.end())
		 Updated : 1 2 3 4 5 6 7 100 100 100 100 100 100 100 2091 8 9 10 11 12 13 14 15 
		 insert(it1,myarr,myarr) 
		 Updated : 1 2 3 4 1 3 3 1 3 1 5 6 7 100 100 100 100 100 100 100 2091 8 9 10 11 12 13 14 15 
	 Erase Functions : 
		 erase(vec.begin()) : 
		 Updated : 2 3 4 1 3 3 1 3 1 5 6 7 100 100 100 100 100 100 100 2091 8 9 10 11 12 13 14 15 
		 erase(vec.begin(),vec1.begin()+6) : 
		 Updated : 1 3 1 5 6 7 100 100 100 100 100 100 100 2091 8 9 10 11 12 13 14 15 
	 Swapping Function : 
		 Vectors before Swapping : 
		 Vector 1 : 3 6 9 12 15 18 21 24 27 30 
		 Vector 2 : 5 10 15 20 25 30 35 40 45 50 
		 Vectors after Swapping : 
		 Vector 1 : 5 10 15 20 25 30 35 40 45 50 
		 Vector 2 : 3 6 9 12 15 18 21 24 27 30 
	 Emplace Function : 
		 emplace(vec1.begin()+4,100) 
		 Updated : 5 10 15 20 100 25 30 35 40 45 50 
		 emplace(vec1.begin()+4,100) 
		 Updated : 5 10 15 20 422 100 25 30 35 40 45 50 
